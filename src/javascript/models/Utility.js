// Generated by CoffeeScript PHP 1.3.1
(function() {
  var arrayInsertListUnique, arrayInsertUnique, arrayRemove, arrayRemoveList, arrayReverseSort, arraySort, arrayUnique, clamp, clone, positionFromColRow, positionFromIndex,
    _this = this,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  clone = function(obj) {
    var flags, key, newInstance;
    if (!(obj != null) || typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      flags = '';
      if (obj.global != null) {
        flags += 'g';
      }
      if (obj.ignoreCase != null) {
        flags += 'i';
      }
      if (obj.multiline != null) {
        flags += 'm';
      }
      if (obj.sticky != null) {
        flags += 'y';
      }
      return new RegExp(obj.source, flags);
    }
    newInstance = new obj.constructor();
    for (key in obj) {
      newInstance[key] = clone(obj[key]);
    }
    return newInstance;
  };

  clamp = function(min, max, value) {
    if (min > value) {
      return min;
    } else if (max < value) {
      return max;
    } else {
      return value;
    }
  };

  arrayUnique = function(data) {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[data[key]] = data[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  arraySort = function(data) {
    return data.sort(function(a, b) {
      return a - b;
    });
  };

  arrayReverseSort = function(data) {
    return data.sort(function(a, b) {
      return b - a;
    });
  };

  positionFromIndex = function(_arg) {
    var index, manager;
    manager = _arg.manager, index = _arg.index;
    if ((typeof col !== "undefined" && col !== null) || (typeof row !== "undefined" && row !== null)) {
      throw "wrong argument";
    }
    if (!(index != null)) {
      throw "missing argument [index]";
    }
    return {
      col: $Model.clamp(0, manager.width, Math.floor(index / manager.height)),
      row: $Model.clamp(0, manager.height, index % manager.height),
      index: index
    };
  };

  positionFromColRow = function(_arg) {
    var col, manager, row, _ref;
    _ref = _arg != null ? _arg : {}, manager = _ref.manager, col = _ref.col, row = _ref.row;
    if (typeof index !== "undefined" && index !== null) {
      throw "wrong argument";
    }
    if (!(col != null) || !(row != null)) {
      throw "missing argument [col, row]";
    }
    return {
      col: $Model.clamp(0, manager.width, col),
      row: $Model.clamp(0, manager.height, row),
      index: col * manager.height + row
    };
  };

  arrayRemoveList = function(object, items) {
    var item, removedItems, _i, _len;
    removedItems = [];
    if (Object.prototype.toString.call(items === "[object Array]")) {
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (__indexOf.call(object, item) >= 0) {
          object.splice(object.indexOf(item), 1);
          removedItems.push(item);
        }
      }
    } else {
      if (__indexOf.call(object, items) >= 0) {
        object.splice(object.indexOf(items), 1);
        removedItems.push(items);
      }
    }
    return removedItems;
  };

  arrayRemove = function(object, item) {
    if (__indexOf.call(object, item) >= 0) {
      object.splice(object.indexOf(item), 1);
      return item;
    }
  };

  arrayInsertListUnique = function(object, items) {
    var insertedItems, item, _i, _len;
    insertedItems = [];
    if (Object.prototype.toString.call(items === "[object Array]")) {
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (__indexOf.call(object, item) < 0) {
          object.push(item);
          insertedItems.push(item);
        }
      }
    } else {
      if (__indexOf.call(object, items) < 0) {
        object.push(items);
        insertedItems.push(items);
      }
    }
    return insertedItems;
  };

  arrayInsertUnique = function(object, item) {
    if (__indexOf.call(object, item) < 0) {
      object.push(item);
      return item;
    }
  };

  $Model.array = {
    remove: arrayRemove,
    sort: arraySort,
    unique: arrayUnique,
    reverseSort: arrayReverseSort,
    insertUnique: arrayInsertUnique,
    insertListUnique: arrayInsertListUnique,
    removeList: arrayRemoveList
  };

  $Model.positionFromColRow = positionFromColRow;

  $Model.positionFromIndex = positionFromIndex;

  $Model.clone = clone;

  $Model.clamp = clamp;

}).call(this);
