// Generated by CoffeeScript PHP 1.3.1
(function() {
  var InterfaceController;

  InterfaceController = (function() {

    function InterfaceController(rootPanel, jsonMainName) {
      this.rootPanel = rootPanel;
      this.jsonMainName = jsonMainName;
      this.panelGame = this.rootPanel.getChildByName("panelGame");
      this.panelBoard = this.panelGame.getChildByName("panelBoard");
      this.panelMain = this.panelGame.getChildByName("panelMain");
      this.panelSetting = this.panelGame.getChildByName("panelSetting");
      this.panelGem = this.panelBoard.getChildByName("panelGem");
      this.imageGemPosition = this.panelGem.getChildByName("imageGemPosition");
      this._attach_event();
    }

    InterfaceController.prototype._attach_event = function() {
      var _this = this;
      this._addButtonListener("buttonPlayNow", function() {
        return _this._buttonPlayNowTouch();
      });
      this._addButtonListener("buttonSetting", function() {
        return _this._buttonSettingTouch();
      });
      this.imageGemPosition = this.panelGem.getChildByName("imageGemPosition");
      this.imageGemPosition._ready = function() {
        return _this._ready();
      };
      this.imageGemPosition._onEnter = this.imageGemPosition.onEnter;
      this.imageGemPosition.onEnter = function() {
        var _this = this;
        this._onEnter();
        return setTimeout(function() {
          _this.visible = false;
          _this.parent.parent.visible = false;
          return _this._ready();
        }, 1);
      };
      this.imageGemPosition.onEnter();
      return this._show(this.panelMain);
    };

    InterfaceController.prototype._ready = function() {
      return this._buttonPlayNowTouch();
    };

    InterfaceController.prototype._buttonPlayNowTouch = function() {
      this._show(this.panelBoard);
      return this._hide(this.panelMain);
    };

    InterfaceController.prototype._buttonMainMenuTouch = function() {
      this._show(this.panelMain);
      return this._hide(this.panelBoard);
    };

    InterfaceController.prototype._buttonSettingTouch = function() {
      var _this = this;
      if (this.panelGame.x <= 100) {
        this._show(this.panelSetting);
        this._stopAnimate("closeMenu");
        return this._animate("openMenu");
      } else {
        this._stopAnimate("openMenu");
        return this._animate("closeMenu", cc.CallFunc.create(function() {
          return _this._hide(_this.panelSetting);
        }, this));
      }
    };

    InterfaceController.prototype._addButtonListener = function(buttonName, callBack) {
      var button;
      button = ccui.helper.seekWidgetByName(this.rootPanel, buttonName);
      return button.addTouchEventListener(function(sender, type) {
        var _this = this;
        switch (type) {
          case ccui.Widget.TOUCH_BEGAN:
            this._stopAnimate("buttonRelease");
            return this._animate("buttonPress");
          case ccui.Widget.TOUCH_MOVED:
            this._stopAnimate("buttonPress");
            return this._animate("buttonRelease", cc.CallFunc.create(function() {
              return typeof callBack === "function" ? callBack() : void 0;
            }));
          case ccui.Widget.TOUCH_CANCELED:
            this._stopAnimate("buttonPress");
            return this._animate("buttonRelease");
        }
      }, this);
    };

    InterfaceController.prototype._animate = function(name, callBack) {
      return ccs.actionManager.playActionByName(this.jsonMainName, name, callBack);
    };

    InterfaceController.prototype._stopAnimate = function(name) {
      var action;
      console.log(name);
      action = ccs.actionManager.getActionByName(this.jsonMainName, name);
      return action.stop();
    };

    InterfaceController.prototype._hide = function(element) {
      if (element.visible || element.zIndex === 0) {
        element.visible = false;
        element._zIndexHide = element.zIndex;
        return element.zIndex = 0;
      }
    };

    InterfaceController.prototype._show = function(element) {
      if (!element.visible) {
        element.visible = true;
        if (element._zIndexHide) {
          element.zIndex = element._zIndexHide;
          return delete element._zIndexHide;
        }
      }
    };

    return InterfaceController;

  })();

  window.InterfaceController = InterfaceController;

}).call(this);
