// Generated by CoffeeScript PHP 1.3.1
(function() {
  var BoardController,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BoardController = (function() {

    function BoardController(_arg) {
      this.panelGem = _arg.panelGem, this.imageGemPosition = _arg.imageGemPosition, this.panelBoard = _arg.panelBoard;
      this._gemEventCallBack = __bind(this._gemEventCallBack, this);

      this._attachEvent();
      this._mouse = {
        move: {
          row: 0,
          col: 0
        }
      };
      ccs.armatureDataManager.addArmatureFileInfo(resource.res.animationJson);
      this.board = new $Model.Board({
        dropTemplate: {
          colors: [1, 2],
          dropRates: {
            "-1": {
              shield: {
                chances: [100, 50, 40, 30, 20, 10],
                values: [0, 1, 2, 3, 4, 5]
              }
            }
          }
        }
      });
      this.gemManager = this.board.gemManager;
      this.tileManager = this.board.tileManager;
      window.board = this.board;
      window.boardGui = this;
      this.recycleGemsGui = [];
      this.dropGemsGui = [];
      this.destoryGemsGui = [];
      this.isBoardTouchable = true;
      this.isTouching = false;
      this.gui = {
        gem: [],
        shield: [],
        lock: []
      };
    }

    BoardController.prototype._attachEvent = function() {
      this.panelGem.addTouchEventListener(this._panelGemTouch, this);
      return this.panelBoard.addTouchEventListener(this._panelGemTouch, this);
    };

    BoardController.prototype._panelGemTouch = function(sender, type) {
      if (this.isBoardTouchable) {
        switch (type) {
          case ccui.Widget.TOUCH_BEGAN:
            this._mouseBegan(sender);
            return this.isTouching = true;
          case ccui.Widget.TOUCH_MOVED:
            if (this.isTouching) {
              return this._mouseMove(sender);
            }
            break;
          case ccui.Widget.TOUCH_ENDED:
          case ccui.Widget.TOUCH_CANCELED:
            this._mouseEnd(sender, type);
            return this.isTouching = false;
        }
      }
    };

    BoardController.prototype._mouseBegan = function(sender) {
      this._mouse.began = this.positionFromColRow({
        col: Math.floor((sender._touchStartPos.x - this.panelGem.x) / 80),
        row: 7 - (Math.floor((sender._touchStartPos.y - this.panelGem.y) / 80))
      });
      this.previousTranslation = {
        row: 0,
        col: 0
      };
      return this.translateType = false;
    };

    BoardController.prototype._mouseMove = function(sender) {
      var different, differentAbs, gem, mouseDifferent, offset, tile, translateAmount, type, _i, _j, _len, _len1, _ref, _ref1;
      different = {
        col: sender._touchMovePos.x - sender._touchStartPos.x,
        row: sender._touchMovePos.y - sender._touchStartPos.y
      };
      if (!this.translateType) {
        differentAbs = {
          col: Math.abs(different.col),
          row: Math.abs(different.row)
        };
        if (Math.max(differentAbs.row, differentAbs.col) < 8) {
          return;
        }
        if (differentAbs.row < differentAbs.col) {
          this.translateType = "col";
        } else {
          this.translateType = "row";
        }
        this.mobile = this.gemManager.translate({
          type: this.translateType,
          position: this._mouse.began,
          amount: 0
        });
      }
      type = this.translateType;
      mouseDifferent = {
        col: -Math.round(different.col / 80),
        row: Math.round(different.row / 80)
      };
      translateAmount = mouseDifferent[type] - this.previousTranslation[type];
      this.previousTranslation = mouseDifferent;
      if (translateAmount !== 0) {
        this.mobile = this.gemManager.translate({
          type: type,
          position: this._mouse.began,
          amount: translateAmount
        });
        _ref = this.gemManager.gems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          gem = _ref[_i];
          this._playAnimation(gem, this._gemName(gem));
        }
        _ref1 = this.tileManager.tiles[this._mouse.began.index].range[type].bush;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          tile = _ref1[_j];
          tile._gui.bush_upper.getAnimation().play("bushShake", 0, 0);
        }
      }
      offset = {
        row: 0,
        col: 0
      };
      if ((type === "row" && mouseDifferent.row <= 0) || (type === "col" && mouseDifferent.col >= 0)) {
        offset[type] = (different[type] - 39) % 80 + 39;
      } else {
        offset[type] = (different[type] - 40) % 80 - 40;
      }
      return this._updateMobileGems(offset);
    };

    BoardController.prototype._mouseEnd = function(sender) {
      var gem, _i, _j, _len, _len1, _ref, _ref1;
      this._mouse.end = this.positionFromColRow({
        col: Math.floor((sender._touchEndPos.x - this.panelGem.x) / 80),
        row: 7 - (Math.floor((sender._touchEndPos.y - this.panelGem.y) / 80))
      });
      this._clickDebug();
      _ref = this.gemManager.gems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gem = _ref[_i];
        this._playAnimation(gem, this._gemName(gem, true) + "Idle");
      }
      this._updateMobileGems({
        row: 0,
        col: 0
      });
      if ((this.mobile != null) && !this.mobile.validMove) {
        this.gemManager.translate({
          type: this.translateType,
          position: this._mouse.began,
          amount: -this.previousTranslation[this.translateType]
        });
        _ref1 = this.gemManager.gems;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          gem = _ref1[_j];
          this._playAnimation(gem, this._gemName(gem, false));
          this._updateGem(gem.position);
        }
      } else {
        this.dropGemsGui = [];
        this._destoryGems();
      }
      delete this._mouse.began;
      return delete this.mobile;
    };

    BoardController.prototype._destoryGems = function() {
      var destoryGems, gem, gui, index, _i, _j, _len, _len1, _ref, _results;
      _ref = this.dropGemsGui;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gui = _ref[_i];
        if (gui.getAnimation().playing) {
          return;
        }
      }
      destoryGems = this.gemManager.destoryMatchGems();
      if (!destoryGems.length) {
        this.isBoardTouchable = true;
        return;
      }
      this.isBoardTouchable = false;
      this.destoryGemsGui = [];
      _results = [];
      for (_j = 0, _len1 = destoryGems.length; _j < _len1; _j++) {
        index = destoryGems[_j];
        gem = this.gemManager.gems[index];
        this.destoryGemsGui.push(gem._gui);
        _results.push(this._actionGemDisappear(gem._gui));
      }
      return _results;
    };

    BoardController.prototype._dropComboGems = function() {
      var gem, gui, index, position, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.destoryGemsGui;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gui = _ref[_i];
        if (gui.getAnimation().playing) {
          return;
        }
      }
      this.dropGemsGui = [];
      this.dropComboGemsGui = [];
      _ref1 = this.gemManager.dropComboGems();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        index = _ref1[_j];
        position = this.positionFromIndex({
          index: index
        });
        gem = this._guiNewGem(position);
        this._actionGemAppear(gem._gui);
        this.dropComboGemsGui.push(gem._gui);
        gem._gui.setUserData({
          from: "_dropComboGems"
        });
      }
      return this._bubbleGems();
    };

    BoardController.prototype._bubbleGems = function() {
      var bubbleGems, delayCol, dropGems, gem, gems, gui, height, index, position, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
      _ref = this.dropComboGemsGui;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gui = _ref[_i];
        if (gui.getAnimation().playing) {
          return;
        }
      }
      bubbleGems = this.gemManager.bubbleDestoryGems();
      for (_j = 0, _len1 = bubbleGems.length; _j < _len1; _j++) {
        _ref1 = bubbleGems[_j], index = _ref1[0], height = _ref1[1];
        position = this.positionFromIndex({
          index: index
        });
        gem = this.gemManager.gems[index];
        this._updateGem(position);
        this._actionFallingGem(gem._gui, height);
        this.dropGemsGui.push(gem._gui);
      }
      dropGems = this.gemManager.dropNewGems();
      $Model.array.reverseSort(dropGems);
      delayCol = {};
      gems = this.gemManager.gems;
      _results = [];
      for (_k = 0, _len2 = dropGems.length; _k < _len2; _k++) {
        index = dropGems[_k];
        position = this.positionFromIndex({
          index: index
        });
        gem = gems[position.index];
        this._guiNewGem(position);
        this._updateGui({
          gui: gem._gui,
          position: {
            col: position.col,
            row: 0
          }
        });
        if (delayCol[position.col] != null) {
          delayCol[position.col]++;
          this._actionDelayGem(gem._gui);
        } else {
          delayCol[position.col] = 0;
          this._actionGemAppear(gem._gui);
        }
        gem._gui.setUserData({
          from: "_bubbleGems",
          fallingHeight: position.row,
          delay: delayCol[position.col]
        });
        _results.push(this.dropGemsGui.push(gem._gui));
      }
      return _results;
    };

    BoardController.prototype._gemEventCallBack = function(gui, event) {
      var gem;
      switch (event) {
        case "fallingComplete":
          return this._actionFallingReboundGem(gui);
        case "fallingReboundComplete":
          return this._destoryGems();
        case "disappearOnBoardComplete":
          this._recycleGui(gui);
          return this._dropComboGems();
        case "appearOnBoardComplete":
          gem = gui.getUserObject();
          this._updateGui({
            gui: gem._gui,
            position: gem.position
          });
          if (gui.getUserData().fallingHeight) {
            return this._actionFallingGem(gui, gui.getUserData().fallingHeight);
          } else if (gui.getUserData().from === "_dropComboGems") {
            return this._bubbleGems();
          } else if (gui.getUserData().from === "_bubbleGems") {
            return this._destoryGems();
          }
          break;
        case "delayComplete":
          if (gui.getUserData().delay > 1) {
            this._actionDelayGem(gui);
            return gui.getUserData().delay--;
          } else {
            return this._actionGemAppear(gui);
          }
      }
    };

    BoardController.prototype._actionGemAppear = function(gui) {
      var animationName, name;
      name = this._gemName(gui.getUserObject(), true);
      animationName = name + "AppearOnBoard";
      return gui.getAnimation().play(animationName);
    };

    BoardController.prototype._actionGemDisappear = function(gui) {
      var animationName, name;
      name = this._gemName(gui.getUserObject(), true);
      animationName = name + "DisappearOnBoard";
      return gui.getAnimation().play(animationName);
    };

    BoardController.prototype._actionFallingGem = function(gui, height) {
      var animationName, name;
      name = this._gemName(gui.getUserObject(), true);
      animationName = name + "Falling" + height;
      return gui.getAnimation().play(animationName);
    };

    BoardController.prototype._actionFallingReboundGem = function(gui) {
      var animationName, name;
      name = this._gemName(gui.getUserObject(), true);
      animationName = name + "FallingRebound";
      return gui.getAnimation().play(animationName);
    };

    BoardController.prototype._actionDelayGem = function(gui) {
      var animationName;
      animationName = "delay";
      return gui.getAnimation().play(animationName);
    };

    BoardController.prototype._clickDebug = function() {
      if (this.gemManager.gems[this._mouse.end.index] != null) {
        return window.gem = this.gemManager.gems[this._mouse.end.index];
      }
    };

    BoardController.prototype._updateMobileGems = function(offset) {
      var col, position, row, _i, _len, _ref, _results;
      if (offset == null) {
        offset = {
          col: {
            0: {
              row: 0
            }
          }
        };
      }
      if (this.mobile != null) {
        _ref = this.mobile.row;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          _results.push((function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = this.mobile.col;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              col = _ref1[_j];
              position = this.positionFromColRow({
                row: row,
                col: col
              });
              _results1.push(this._updateGem(position, offset));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };

    BoardController.prototype._populateGem = function() {
      var col, gem, gems, position, row, _i, _ref, _results;
      gems = this.gemManager.gems;
      _results = [];
      for (col = _i = 0, _ref = this.tileManager.width; 0 <= _ref ? _i < _ref : _i > _ref; col = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (row = _j = 0, _ref1 = this.tileManager.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; row = 0 <= _ref1 ? ++_j : --_j) {
            position = this.positionFromColRow({
              row: row,
              col: col
            });
            gem = gems[position.index];
            if (gem.color) {
              this._guiNewGem(position);
              _results1.push(this._updateGem(position));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    BoardController.prototype._gemName = function(gem, ignore) {
      var color, combo, snap;
      if (ignore == null) {
        ignore = false;
      }
      if (gem.color) {
        combo = $Config.combos[gem.combo];
        color = $Config.colors[gem.color];
        if (!ignore) {
          if (Math.max(gem.neighbour.row.length, gem.neighbour.col.length) > 2) {
            snap = "SnapSnap";
          } else {
            snap = "Idle";
          }
        } else {
          snap = "";
        }
        return "" + color + combo + snap;
      }
    };

    BoardController.prototype._updateGem = function(position, offset) {
      var gem;
      if (offset == null) {
        offset = {
          col: 0,
          row: 0
        };
      }
      gem = this.gemManager.gems[position.index];
      if (gem._gui) {
        return this._updateGui({
          gui: gem._gui,
          position: position,
          offset: offset
        });
      }
    };

    BoardController.prototype._updateGui = function(_arg) {
      var gui, offset, position;
      gui = _arg.gui, position = _arg.position, offset = _arg.offset;
      if (offset == null) {
        offset = {
          col: 0,
          row: 0
        };
      }
      gui.zIndex = position.row * 4 + 1;
      gui.x = position.col * 80 + this.imageGemPosition.x + offset.col;
      return gui.y = (7 - position.row) * 80 + this.imageGemPosition.y + offset.row;
    };

    BoardController.prototype._playAnimation = function(gem, animationName) {
      if (gem._gui != null) {
        return gem._gui.getAnimation().play(animationName);
      }
    };

    BoardController.prototype.positionFromColRow = function(_arg) {
      var col, row;
      col = _arg.col, row = _arg.row;
      return $Model.positionFromColRow({
        manager: this.tileManager,
        row: row,
        col: col
      });
    };

    BoardController.prototype.positionFromIndex = function(_arg) {
      var index, position;
      index = _arg.index;
      return position = $Model.positionFromIndex({
        manager: this.tileManager,
        index: index
      });
    };

    BoardController.prototype._populateBush = function() {
      var bush_lower, bush_upper, col, position, row, tile, tiles, type, _i, _ref, _results;
      tiles = this.tileManager.tiles;
      _results = [];
      for (col = _i = 0, _ref = this.tileManager.width; 0 <= _ref ? _i < _ref : _i > _ref; col = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (row = _j = 0, _ref1 = this.tileManager.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; row = 0 <= _ref1 ? ++_j : --_j) {
            position = this.positionFromColRow({
              row: row,
              col: col
            });
            tile = tiles[position.index];
            if (!tile.isGemable) {
              if (!tile.isPassable) {
                type = "hole";
              } else {
                type = "bush";
              }
              bush_lower = this._placeBoard("" + type + "Base", position);
              bush_upper = this._placeBoard("" + type + "Idle", position);
              bush_lower.zIndex -= 1;
              bush_upper.zIndex += $Config.row + 1;
              tile._gui = {
                bush_upper: bush_upper,
                bush_lower: bush_lower
              };
              bush_lower.setUserObject(tile);
              _results1.push(bush_upper.setUserObject(tile));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    BoardController.prototype._guiNewGem = function(position) {
      var gem, gui;
      gem = this.gemManager.gems[position.index];
      gem._gui = gui = this._placeBoard(this._gemName(gem, true) + "Idle", position);
      if (gem.shield) {
        gem._gui_shield = this._placeBoard("shield0" + gem.shield + "Idle", position);
        gem._gui_shield.zIndex = position.row * 4 + 2;
      }
      gui.setUserObject(gem);
      return gem;
    };

    BoardController.prototype._recycleGui = function(gui) {
      var gem;
      gui.parent.removeNode(gui);
      gem = gui.getUserObject();
      gem._gui = null;
      gui.setUserObject(null);
      gui.x = -100;
      gui.y = -100;
      return this.recycleGemsGui.push(gui);
    };

    BoardController.prototype._placeBoard = function(name, position) {
      var armature,
        _this = this;
      armature = this.recycleGemsGui.pop();
      if (!armature) {
        armature = ccs.Armature.create("gem");
        armature.anchorX = 0.5;
        armature.anchorY = 0.5;
      }
      armature.getAnimation().play(name);
      armature.getAnimation().setFrameEventCallFunc(function(ignore, event) {
        return _this._gemEventCallBack(armature, event);
      });
      this._updateGui({
        gui: armature,
        position: position
      });
      this.panelGem.addNode(armature);
      return armature;
    };

    return BoardController;

  })();

  window.BoardController = BoardController;

}).call(this);
